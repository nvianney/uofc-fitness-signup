# This is a basic workflow to help you get started with Actions

name: Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.8' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            selenium
            pysimplegui
            requests

      - name: Compile
        run: python -m gui.py
        
  distribute-windows:
    name: Distribute for Windows
    runs-on: windows-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.8' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            selenium
            pysimplegui
            requests
            pyinstaller
            tinyaes
            
      - name: Get version number
        id: version
        run: echo "::set-output name=number::$(echo $(head -n 1 VERSION) | tr -d '\n')"
        shell: bash
      
      - name: Create Windows distributable
        run: pyinstaller package.spec --onefile --key "f9A*8723FAoipw(" --name "uofc_fitness.exe"
        
      - name: Create distributable archive
        run: 7z a "$env:VERSION-windows.zip" dist/*
        env:
          VERSION: ${{ steps.version.outputs.number }}
        
      - name: Upload to artifacts
        uses: actions/upload-artifact@v2.2.3
        with:
          name: dist-windows
          path: dist/*.zip
          retention-days: 1
          
  distribute-macos:
    name: Distribute for macOS
    runs-on: macos-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.8' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            selenium
            pysimplegui
            requests
            pyinstaller
            tinyaes
            
      - name: Get version number
        id: version
        run: echo "::set-output name=number::$(echo $(head -n 1 VERSION) | tr -d '\n')"
      
      - name: Create macOS distributable
        run: pyinstaller package.spec --onefile --key "f9A*8723FAoipw(" --name "uofc_fitness"
        
      - name: Create distributable archive
        run: zip -r "$VERSION-macos.zip" dist/*
        env:
          VERSION: ${{ steps.version.outputs.number }}
        
      - name: Upload to artifacts
        uses: actions/upload-artifact@v2.2.3
        with:
          name: dist-macos
          path: dist/*.zip
          retention-days: 1
          
  publish:
    name: Publish to Releases
    runs-on: ubuntu-latest
    needs: [distribute-windows, distribute-macos]
    steps:
    
      - name: Download Windows distributable
        uses: actions/download-artifact@v2
        with:
          name: dist-windows
          path: .

      - name: Download macOS distributable
        uses: actions/download-artifact@v2
        with:
          name: dist-macos
          path: .
          
      - name: Get version number
        id: version
        run: echo "::set-output name=number::$(echo $(head -n 1 VERSION) | tr -d '\n')"

      - name: Publish
        uses: ncipollo/release-action@v1
        with:
          artifactErrorsFailBuild: true
          artifacts: "*.zip"
          commit: master
          prerelease: false
          tag: ${{ steps.version.outputs.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
